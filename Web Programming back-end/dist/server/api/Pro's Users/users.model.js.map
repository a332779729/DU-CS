{"version":3,"sources":["api/Pro's Users/users.model.js"],"names":["Schema","mongoose","addressSchema","addressLine1","type","String","required","addressLine2","city","state","zip","Number","nameSchema","firstName","middleName","lastName","userSchema","age","address","Types","ObjectId","ref","name","Address","model","User"],"mappings":";;;;;;;AAAA;;;;;;AACA,IAAIA,SAASC,mBAASD,MAAtB;;AAEA;;;;;AAKA;AACA,IAAIE,gBAAgBF,OAAO;AACzB;AACAG,gBAAc,EAACC,MAAMC,MAAP,EAAeC,UAAU,IAAzB,EAFW;AAGzB;AACAC,gBAAc,EAACH,MAAMC,MAAP,EAAeC,UAAU,KAAzB,EAJW;AAKzB;AACAE,QAAM,EAACJ,MAAMC,MAAP,EAAeC,UAAU,IAAzB,EANmB;AAOzB;AACAG,SAAO,EAACL,MAAMC,MAAP,EAAeC,UAAU,IAAzB,EARkB;AASzB;AACAI,OAAK,EAACN,MAAMO,MAAP,EAAeL,UAAU,IAAzB;AAVoB,CAAP,CAApB;;AAaA;AACA,IAAIM,aAAaZ,OAAO;AACtB;AACAa,aAAW,EAACT,MAAMC,MAAP,EAAeC,UAAU,IAAzB,EAFW;AAGtB;AACAQ,cAAY,EAACV,MAAMC,MAAP,EAAeC,UAAU,KAAzB,EAJU;AAKtB;AACAS,YAAU,EAACX,MAAMC,MAAP,EAAeC,UAAU,IAAzB;AANY,CAAP,CAAjB;;AASA;AACA,IAAIU,aAAahB,OAAO;AACtB;AACAiB,OAAK,EAACb,MAAMO,MAAP,EAAeL,UAAU,IAAzB,EAFiB;AAGtB;;;;;;AAMAY,WAAS,EAACd,MAAMJ,OAAOmB,KAAP,CAAaC,QAApB,EAA8BC,KAAK,SAAnC,EATa;AAUtB;;;;;;;AAOAC,QAAMV;AAjBgB,CAAP,CAAjB;;AAoBA;;;;;;;AAOA,IAAIW,UAAUtB,mBAASuB,KAAT,CAAe,SAAf,EAA0BtB,aAA1B,CAAd;AACA,IAAIuB,OAAOxB,mBAASuB,KAAT,CAAe,MAAf,EAAuBR,UAAvB,CAAX;;AAEA;QACQO,O,GAAAA,O;QAASE,I,GAAAA,I","file":"users.model.js","sourcesContent":["import mongoose from 'mongoose';\nlet Schema = mongoose.Schema;\n\n/*\n  This section declares the schemas for the different documents\n  that will be used\n */\n\n// This schema represents the address of the user\nlet addressSchema = Schema({\n  // addressLine1 is a simple String type that is required\n  addressLine1: {type: String, required: true},\n  // addressLine2 is a simple String type that is NOT required\n  addressLine2: {type: String, required: false},\n  // city is a simple String type that is required\n  city: {type: String, required: true},\n  // state is a simple String type that is required\n  state: {type: String, required: true},\n  // zip is a simple Number type that is required\n  zip: {type: Number, required: true}\n});\n\n// This schema represents the name of the user\nlet nameSchema = Schema({\n  // firstName is a simple String type that is required\n  firstName: {type: String, required: true},\n  // middleName is a simple String type that is not required\n  middleName: {type: String, required: false},\n  // lastName is a simple String type that is required\n  lastName: {type: String, required: true}\n});\n\n// This is the main user schema\nlet userSchema = Schema({\n  // Age is a simple number type that is required\n  age: {type: Number, required: true},\n  /*\n   Address is referenced as a 'foreign key' using the objectId\n   of an address stored in a separate collection.\n   The address will be populated by Mongoose using 'Population'\n   http://mongoosejs.com/docs/populate.html\n  */\n  address: {type: Schema.Types.ObjectId, ref: 'Address'},\n  /*\n   Name is a subdocument of User, and will be stored\n   in the same document as the User itself.\n   Unlike a populated document, this doesn't require an\n   ObjectId reference and the schema for name can be\n   referenced directly\n  */\n  name: nameSchema\n});\n\n/*\n  This section creates interactive models from the defined schemas\n  above so that you can perform Create Read Update and Delete (CRUD)\n  operations against the schemas.\n  NOTE since the nameSchema is embedded within userSchema, it does NOT have\n  to be created as a model!\n */\nlet Address = mongoose.model('Address', addressSchema);\nlet User = mongoose.model('User', userSchema);\n\n// Export the two created models, Address and User\nexport {Address, User};\n"]}