{"version":3,"sources":["api/myUsers/users.controller.js"],"names":["index","show","create","upsert","destroy","req","res","status","json","User","find","id","params","findUser","findById","message","name","body","address","age","user","myUser","result","findOneAndUpdate","console","log","remove","send"],"mappings":"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","file":"users.controller.js","sourcesContent":["import uuidv4 from 'uuid/v4';\n\nimport User from './users.model';\n\n/*let users = [{\"id\":101,\"name\":\"Fight Club\",\"year\":1999,\"rating\":8.1},\n{\"id\":102,\"name\":\"Inception\",\"year\":2010,\"rating\":8.7},\n{\"id\":103,\"name\":\"The Dark Knight\",\"year\":2008,\"rating\":9},\n{\"id\":104,\"name\":\"12 Angry Men\",\"year\":1957,\"rating\":8.9}];*/\n\n//let users = [];\n\n//Create a new exported function listContents that takes two parameters,\n//req and res (provided by Express.js when a web request comes in),\n//that sends the users array as json to the res object\n\n//function named listContents it can check all users data.\nexport function index(req, res) {\n   /* Implementation here */\n   res.status(200);\n   res.json(User.find());\n}\n\n//Create a second exported function, findOne, that takes two parameters, req and res (provided by Express.js when a web request comes in),\n//that extracts a parameter named id from the req object and searches the users list for a user with a matching id\n\n//function named findOne it can check one user data.\nexport function show(req, res) {\n   /* Implementation here */\n   var id = req.params.id;\n   var findUser = User.findById(id);\n   /*for(var i=0; i <users.length; i++){\n     var user = users[i];\n     if(user.id === id){\n       findUser = user;\n       break;\n     }\n   }*/\n  if(findUser === null){\n    res.status(404);\n    res.json({message: 'Not Found'});\n  }else{\n    res.status(200);\n    res.json(findUser);\n  }\n}\n\n//Create a new exported function createUser that takes two parameters,\n//req and res (provided by Express.js when a web request comes in), that adds a new user object to the in-memory users list\n\n//function named createUser it can create a user data.\nexport function create(req, res) {\n   /* Implementation here */\n   //let id = uuidv4();\n   let name = req.body.name;\n   let address = req.body.address;\n   let age = req.body.age;\n   if(typeof(name) === \"string\" && typeof(address) ===\"string\" && typeof(age) ===\"number\" && age > 0){\n     let user = {\"id\":null,\"name\":name,\"address\":address,\"age\":age};\n     res.status(201);\n     res.json(User.create(user));\n   }else{\n     res.status(400);\n     res.json({message: 'request is not valid'});\n   }\n}\n\n//Create a new exported function updateUser that takes two parameters, req and res.\n//The method updates a user object if it exists, or creates a new user if it does not exist.\n//The method returns the updated or created user as json to the res object with the HTTP status code OK (200) for an update and CREATED (201) for an insert\n\n//function named updateUser it can updata a user data.\nexport function upsert(req, res) {\n  var id = req.params.id;\n  let name = req.body.name;\n  let address = req.body.address;\n  let age = req.body.age;\n\n  /*var findUser = null;\n  for(var i=0; i <users.length; i++){\n    var user = users[i];\n    if(user.id === id){\n      findUser = user;\n      break;\n    }\n  }\n  if(findUser !== null){\n    findUser.name = name;\n    findUser.address = address;\n    findUser.age = age;\n    res.status(200);\n    res.json(findUser);\n  }else{\n    if(typeof(name) === \"string\" && typeof(address) ===\"string\" &&typeof(age) ===\"number\" && age > 0){\n      let user = {\"id\":id, \"name\":name, \"adress\":address, \"age\":age};\n      users.push(user);\n      res.status(201);\n      res.json(user);\n    }\n  }*/\n\n  let myUser = ({\n    id : id,\n    name: name,\n    address: address,\n    age: age\n  });\n\n  var result = User.findOneAndUpdate(myUser)\n  if(result == true){\n    res.status(200);\n    res.json(myUser);\n  }else{\n      //let user = {\"id\":id, \"name\":name, \"adress\":address, \"age\":age};\n      res.status(201);\n      res.json(myUser);\n\n  }\n}\n\n//Create a second exported function removeUser that takes two parameters, req and res, that removes a user from the in-memory store\n\n////function named removeUser it can remove a user data.\nexport function destroy(req, res){\n  var id = req.params.id;\n  console.log(\"controller--->id:\",id);\n  //var findUser = null;\n  /*for(var i=0; i <users.length; i++){\n    var user = users[i];\n    if(user.id === id){\n      findUser = user;\n      break;\n    }\n  }\n\n  if(findUser === null){\n    res.status(404);\n    res.json({message: \"Not Found\"});\n  }else{\n    let newUsers = [];\n    for(var i=0; i<users.length; i++){\n      var user = users[i];\n      if(user.id !== id){\n        newUsers.push(user);\n      }\n    }\n    //let result = users.filter(user=> user.id !== id);\n    users = newUsers;\n    res.status(204).send();\n    res.json(users);\n  }*/\n  let myUser = ({\n    id : id\n  });\n  var result = User.remove(myUser);\n  if(result == false){\n    res.status(404);\n    res.json({message: \"Not Found\"});\n  }else{\n    res.status(204).send();\n    //res.json(myUser);\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//res.status(404);\n//res.json({message: 'Not Found'});\n"]}