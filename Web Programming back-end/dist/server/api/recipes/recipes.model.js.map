{"version":3,"sources":["api/recipes/recipes.model.js"],"names":["Schema","mongoose","ingredientSchema","nutrition","type","String","required","poison","recipeSchema","name","description","pictureURL","prepTime","Number","min","cookingTime","directions","ingredients","userReviews","Types","ObjectId","ref","Recipe","model"],"mappings":";;;;;;;AAAA;;;;;;AACA,IAAIA,SAASC,mBAASD,MAAtB;;AAEA;;;;;AAKA;AACA,IAAIE,mBAAmBF,OAAO;AAC1B;AACAG,aAAW,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAFe;AAG1B;AACAC,UAAQ,EAAEH,MAAMC,MAAR,EAAgBC,UAAU,IAA1B;AAJkB,CAAP,CAAvB;;AAQA;AACA,IAAIE,eAAeR,OAAO;AACxB;AACAS,QAAM,EAACL,MAAMC,MAAP,EAAeC,UAAU,IAAzB,EAFkB;AAGxB;AACAI,eAAa,EAACN,MAAMC,MAAP,EAAeC,UAAU,IAAzB,EAJW;AAKxB;AACAK,cAAY,EAACP,MAAMC,MAAP,EAAeC,UAAU,IAAzB,EANY;AAOxB;AACAM,YAAU,EAACR,MAAMS,MAAP,EAAeC,KAAK,CAApB,EAAuBR,UAAU,IAAjC,EARc;AASxB;AACAS,eAAa,EAACX,MAAMS,MAAP,EAAeC,KAAK,CAApB,EAAuBR,UAAU,IAAjC,EAVW;AAWxB;AACAU,cAAY,CAAC,EAACZ,MAAMC,MAAP,EAAeC,UAAU,IAAzB,EAAD,CAZY;AAaxB;;;;;;;AAOAW,eAAa,CAACf,gBAAD,CApBW;AAqBxB;;;;;;AAMAgB,eAAa,CAAC,EAACd,MAAMJ,OAAOmB,KAAP,CAAaC,QAApB,EAA8BC,KAAK,QAAnC,EAAD;;AA3BW,CAAP,CAAnB;;AA+BA;;;;;;;AAOA,IAAIC,SAASrB,mBAASsB,KAAT,CAAe,QAAf,EAAyBf,YAAzB,CAAb;;AAEA;QACQc,M,GAAAA,M","file":"recipes.model.js","sourcesContent":["import mongoose from 'mongoose';\nlet Schema = mongoose.Schema;\n\n/*\n  This section declares the schemas for the different documents\n  that will be recipe\n */\n\n// This schema represents the ingredient of the recipe\nlet ingredientSchema = Schema({\n    // nutrition is a simple String type that is required\n    nutrition: { type: String, required: true },\n    // poison is a simple String type that is required\n    poison: { type: String, required: true },\n })\n\n\n// This is the main user schema\nlet recipeSchema = Schema({\n  // name is a simple String type that is required\n  name: {type: String, required: true},\n  // description is a simple String type that is required\n  description: {type: String, required: true},\n  // pictureURL is a simple String type that is required\n  pictureURL: {type: String, required: true},\n  // prepTime is a simple Number type that is required, and I design the min number is 0\n  prepTime: {type: Number, min: 0, required: true},\n  // cookingTime is a simple Number type that is required, and I design the min number is 0\n  cookingTime: {type: Number, min: 0, required: true},\n  // directions is a array and the every element is a simple String type that is required\n  directions: [{type: String, required: true}],\n  /*\n   ingredients is a subdocument of Recipe, and will be stored\n   in the same document as the Recipe itself.\n   Unlike a populated document, this doesn't require an\n   ObjectId reference and the schema for name can be\n   referenced directly\n  */\n  ingredients: [ingredientSchema],\n  /*\n   userReviews is referenced as a 'foreign key' using the objectId\n   of an Review stored in a separate collection.\n   The userReviews will be populated by Mongoose using 'Population'\n   http://mongoosejs.com/docs/populate.html\n  */\n  userReviews: [{type: Schema.Types.ObjectId, ref: \"Review\" }],\n\n});\n\n/*\n  This section creates interactive models from the defined schemas\n  above so that you can perform Create Read Update and Delete (CRUD)\n  operations against the schemas.\n  NOTE since the nameSchema is embedded within reviewSchema, it does NOT have\n  to be created as a model!\n */\nlet Recipe = mongoose.model('Recipe', recipeSchema);\n\n// Export the one created Recipe\nexport {Recipe};\n"]}