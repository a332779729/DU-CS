{"version":3,"sources":["api/reviews/reviews.controller.js"],"names":["index","show","create","update","destroy","req","res","Review","find","populate","exec","then","reviews","json","catch","err","status","send","findById","params","id","existingReview","message","userId","body","recipeId","user","console","log","User","recipe","Recipe","review","reviewDescription","reviewRating","userCreatingReview","createdReview","userReviews","push","increment","save","all","savedObjects","remove","deletedReview"],"mappings":"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","file":"reviews.controller.js","sourcesContent":["'use strict';\n\nimport {Review} from './reviews.model';\nimport {User} from '../users/users.model';\nimport {Recipe} from '../recipes/recipes.model';\n\n/**\n* Find all Review\n*/\nexport function index(req, res) {\n  Review.find()\n    .populate('userCreatingReview')\n    .exec()\n    .then(function(reviews) {\n      res.json({\n        reviews\n      });\n    })\n    .catch(function(err) {\n      res.status(500);\n      res.send(err);\n    });\n}\n\n\n\n/**\n* Find review details by review Id\n* @param {String} id : review Id\n*/\nexport function show(req, res) {\n  Review.findById(req.params.id)\n    .populate('userCreatingReview')\n    .exec()\n    .then(function(existingReview) {\n      /*\n       findById will return null if the object was not found\n       This if check will evaluate to false for a null review\n      */\n      if(existingReview) {\n        // Review was found by Id\n        res.status(200);\n        res.json(existingReview);\n      } else {\n        // Review was not found\n        res.status(404);\n        res.json({message: 'Not Found'});\n      }\n    })\n    .catch(function(err) {\n      res.status(400);\n      res.send(err);\n    });\n}\n\n\n\n/**\n* Create a new Review\n* @param {String} reviewDescription : Review description\n* @param {Number} reviewRating : Review rating (i.e. number of stars)\n* @param {String} userId : User ID\n* @param {String} recipeId : Recipe ID\n*/\nexport async function create(req, res) {\n\n  let userId = req.body.userId;\n  let recipeId = req.body.recipeId;\n  let user;\n\n  //find user by user Id\n  try{\n    console.log(userId);\n    user = await User.findById(userId);\n    console.log(user);\n    if(!user){\n      res.status(400);\n      res.json({message: 'Not Found User'});\n      return;\n    }\n\n  }catch(err){\n    console.log(err);\n    res.status(400);\n    res.send(err);\n    return;\n  }\n\n  //find the recipes by recipe's ID\n  let recipe;\n  try{\n    console.log(recipeId);\n    recipe = await Recipe.findById(recipeId);\n    console.log(recipe);\n    if(!recipe){\n      res.status(400);\n      res.json({message: 'Not Found Recipe'});\n      return;\n    }\n\n  }catch(err){\n    console.log(err);\n    res.status(400);\n    res.send(err);\n    return;\n  }\n\n\n  let review = {\n    reviewDescription: req.body.reviewDescription,\n    reviewRating: req.body.reviewRating,\n    userCreatingReview: user\n  };\n\n  //save review to mongoose\n  try{\n    let createdReview = await Review.create(review);\n    //take review to recipes\n    recipe.userReviews.push(createdReview);\n    recipe.increment().save();\n\n    res.status(201);\n    res.json(createdReview);\n\n  }catch(err){\n    console.log(err);\n    res.status(400);\n    res.send(err);\n  }\n\n}\n\n\n\n/**\n* Update a review\n* @param {String} id : Review ID\n* @param {String} reviewDescription : Review description\n* @param {Number} reviewRating : Review rating (i.e. number of stars)\n*/\nexport function update(req, res) {\n  // Start by trying to find the review by its id\n  Review.findById(req.params.id)\n    .exec()\n    // Update review\n    .then(function(existingReview) {\n      // If review exists, update all fields of the object\n      console.log(existingReview);\n      if(existingReview) {\n        existingReview.reviewDescription = req.body.reviewDescription;\n        existingReview.reviewRating = req.body.reviewRating;\n\n        //update review commend not need update the user information\n        //existingReview.userCreatingReview = req.body.userCreatingReview;\n\n        /*\n         Promise.all takes an array of promises as an argument\n         It ensures that all the promises in the array have successfully resolved before\n         continuing the promise chain. It will pass to the next .then an array of results, one\n         for each promise that was passed\n        */\n        return Promise.all([\n          existingReview.increment().save()\n        ]);\n      } else {\n        // Review was not found\n        return existingReview;\n      }\n    })\n    // This .then will be called after the Promise.all resolves, or be called with null if the review was not found\n    .then(function(savedObjects) {\n      // savedObjects should be defined if Promise.all was invoked (review was found)\n      if(savedObjects) {\n        res.status(200);\n        // The order of responses are guaranteed to be the same as the order of the promises, so we can assume\n        // the second element of the array is the result of the review update\n        res.json(savedObjects[1]);\n      } else {\n        // Review was not found\n        res.status(404);\n        res.json({message: 'Not Found'});\n      }\n    })\n    // Error encountered during the save of the review\n    .catch(function(err) {\n      console.log(err);\n      res.status(400);\n      res.send(err);\n    });\n}\n\n\n\n/**\n* Remove a review\n* @param {String} id : Review ID\n*/\nexport function destroy(req, res) {\n  Review.findById(req.params.id)\n    .exec()\n    .then(function(existingReview) {\n      if(existingReview) {\n        /*\n          This is the equivalent of cascading delete in a relational database\n          If the review was found, remove both the review object and the address object from\n          their respective collections. Only record the delete as successful if both objects\n          are deleted\n         */\n        return Promise.all([\n          existingReview.remove()\n        ]);\n      } else {\n        return existingReview;\n      }\n    })\n    // Delete was successful\n    .then(function(deletedReview) {\n      if(deletedReview) {\n        res.status(204).send();\n      } else {\n        // review was not found\n        res.status(404);\n        res.json({message: 'Not Found'});\n      }\n    })\n    // Review delete failed\n    .catch(function(err) {\n      res.status(400);\n      res.send(err);\n    });\n}\n"]}